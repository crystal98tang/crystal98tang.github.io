{"compress":true,"commitItems":[["a2d9027a-d0b6-4e09-91ce-35353806e61b",1551621057598,"---\nlayout: post\ntitle: Lorem ipsum\ncategories: \n  - consectetur\n  - malesuada\ntags:\n  - semper\n  - fermentum\n---\n\n![Nulla euismod, vitae aliquet orci eleifend.]($appres/images/night.jpg)\n\n# Lorem ipsum\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus eu tempor dolor. Nulla hendrerit convallis purus et elementum. Suspendisse non magna vel justo tincidunt finibus. Nullam dui erat, malesuada eget viverra non, finibus a nisl.",[[1551621051315,["tyk50@DESKTOP-1LVUD2E",[[-1,24,"Lorem ipsum"],[1,35,"函数式"]],[24,24],[27,27]]],[1551621052272,["tyk50@DESKTOP-1LVUD2E",[[1,27,"语言"]],[27,27],[29,29]]],[1551621061007,["tyk50@DESKTOP-1LVUD2E",[[-1,47,"consectetur"],[1,58,"编程"]],[47,47],[49,49]]],[1551621063509,["tyk50@DESKTOP-1LVUD2E",[[-1,50,"  - malesuada"]],[50,63],[50,50]]],[1551621063865,["tyk50@DESKTOP-1LVUD2E",[[-1,50,"\n"]],[50,50],[49,49]]],[1551621067504,["tyk50@DESKTOP-1LVUD2E",[[-1,60,"semper"],[1,66,"编程"]],[60,60],[62,62]]],[1551621070379,["tyk50@DESKTOP-1LVUD2E",[[-1,67,"fermentum"]],[67,67],[67,67]]],[1551621070658,["tyk50@DESKTOP-1LVUD2E",[[-1,67,"\n"]],[67,67],[67,67]]],[1551621072264,["tyk50@DESKTOP-1LVUD2E",[[1,67,"\n  "]],[67,67],[70,70]]],[1551621076829,["tyk50@DESKTOP-1LVUD2E",[[-1,68,"  "]],[70,70],[68,68]]],[1551621080813,["tyk50@DESKTOP-1LVUD2E",[[1,67,"函数式语言"]],[67,67],[72,72]]],[1551621086520,["tyk50@DESKTOP-1LVUD2E",[[-1,78,"![Nulla euismod, vitae aliquet orci eleifend.]($appres/images/night.jpg)"],[-1,151,"\n# Lorem ipsum\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus eu tempor dolor. Nulla hendrerit convallis purus et elementum. Suspendisse non magna vel justo tincidunt finibus. Nullam dui erat, malesuada eget viverra non, finibus a nisl."]],[78,408],[78,78]]],[1551621087291,["tyk50@DESKTOP-1LVUD2E",[[1,78,"函数式语言(functional language)一类程序设计语言，是一种非冯·诺伊曼式的程序设计语言。函数式语言主要成分是原始函数、定义函数和函数型。这种语言具有较强的组织数据结构的能力，可以把某一数据结构(如数组)作为单一值处理；可以把函数作为参数，其结果也可为函数，这种定义的函数称为高阶函数，程序就是函数，程序作用在结构型数据上，产生结构型结果，从根本上改变了冯·诺伊曼式语言的“逐词”工作方式。"]],[78,78],[281,281]]],[1551621092111,["tyk50@DESKTOP-1LVUD2E",[[1,78,"\n"]],[77,77],[78,78]]],[1551621105229,["tyk50@DESKTOP-1LVUD2E",[[1,78,"#  "]],[78,78],[80,80]]],[1551621105538,["tyk50@DESKTOP-1LVUD2E",[[1,80,"函数式语言"]],[80,80],[85,85]]],[1551621106591,["tyk50@DESKTOP-1LVUD2E",[[1,85,"\n"]],[85,85],[86,86]]],[1551621129202,["tyk50@DESKTOP-1LVUD2E",[[1,78,"\n"]],[77,77],[78,78]]],[1551621132378,["tyk50@DESKTOP-1LVUD2E",[[1,78,"zai"]],[78,78],[81,81]]],[1551621133071,["tyk50@DESKTOP-1LVUD2E",[[-1,78,"zai"]],[81,81],[78,78]]],[1551621167226,["tyk50@DESKTOP-1LVUD2E",[[1,78,"在介绍函数式语言之前我们先来认识认识工人"]],[78,78],[98,98]]],[1551621167755,["tyk50@DESKTOP-1LVUD2E",[[-1,96,"工人"]],[98,98],[96,96]]],[1551621170022,["tyk50@DESKTOP-1LVUD2E",[[1,96,"工人"]],[96,96],[98,98]]],[1551621170630,["tyk50@DESKTOP-1LVUD2E",[[-1,96,"工人"]],[98,98],[96,96]]],[1551621172618,["tyk50@DESKTOP-1LVUD2E",[[1,96,"公认"]],[96,96],[98,98]]],[1551621175506,["tyk50@DESKTOP-1LVUD2E",[[-1,94,"认识"]],[96,96],[94,94]]],[1551621178303,["tyk50@DESKTOP-1LVUD2E",[[1,94,"已选"]],[94,94],[96,96]]],[1551621178926,["tyk50@DESKTOP-1LVUD2E",[[-1,94,"已选"]],[96,96],[94,94]]],[1551621180369,["tyk50@DESKTOP-1LVUD2E",[[1,94,"一下"]],[94,94],[96,96]]],[1551621201270,["tyk50@DESKTOP-1LVUD2E",[[1,98,"的几种编程语言种类。"]],[98,98],[108,108]]],[1551621202164,["tyk50@DESKTOP-1LVUD2E",[[-1,107,"。"]],[108,108],[107,107]]],[1551621202515,["tyk50@DESKTOP-1LVUD2E",[[1,108,"\n"]],[107,107],[108,108]]],[1551621205338,["tyk50@DESKTOP-1LVUD2E",[[1,78,"\n"]],[78,78],[79,79]]],[1551621211677,["tyk50@DESKTOP-1LVUD2E",[[1,78,"# 编程语言的种类"]],[78,78],[87,87]]],[1551621212986,["tyk50@DESKTOP-1LVUD2E",[[1,119,"\n"]],[117,117],[118,118]]],[1551621213455,["tyk50@DESKTOP-1LVUD2E",[[1,120,"\n"]],[118,118],[119,119]]],[1551621214698,["tyk50@DESKTOP-1LVUD2E",[[1,119,"![](file:///C:\\Users\\tyk50\\AppData\\Local\\Temp\\SGPicFaceTpBq\\15140\\005ECA8A.png)"]],[119,119],[198,198]]],[1551621215823,["tyk50@DESKTOP-1LVUD2E",[[-1,119,"![](file:///C:\\Users\\tyk50\\AppData\\Local\\Temp\\SGPicFaceTpBq\\15140\\005ECA8A.png)"]],[198,198],[119,119]]],[1551621224877,["tyk50@DESKTOP-1LVUD2E",[[1,119,"（1）结构化编程语言，比如C语言等。\n\n（2）函数式编程语言，比如OCaml, Lisp等。\n\n（3）逻辑式编程语言，比如Prolog等。\n\n（4）面向对象程序语言，比如Java等。"]],[119,119],[210,210]]],[1551621229479,["tyk50@DESKTOP-1LVUD2E",[[1,119,"1. "],[1,138,"2. "],[1,139,"3. "],[1,166,"4. "],[1,167,"5. "],[1,189,"6. "],[1,190,"7. "]],[119,210],[122,231]]],[1551621231934,["tyk50@DESKTOP-1LVUD2E",[[-1,122,"（1）"]],[125,125],[122,122]]],[1551621233337,["tyk50@DESKTOP-1LVUD2E",[[-1,138,"2. "]],[138,141],[138,138]]],[1551621233868,["tyk50@DESKTOP-1LVUD2E",[[-1,138,"\n"]],[138,138],[137,137]]],[1551621238410,["tyk50@DESKTOP-1LVUD2E",[[-1,138,"3. （2）"]],[138,144],[138,138]]],[1551621238764,["tyk50@DESKTOP-1LVUD2E",[[-1,137,"\n"]],[138,138],[137,137]]],[1551621239747,["tyk50@DESKTOP-1LVUD2E",[[1,137,"\n"]],[137,137],[138,138]]],[1551621242498,["tyk50@DESKTOP-1LVUD2E",[[-1,162,"4. \n5. "]],[162,169],[162,162]]],[1551621244164,["tyk50@DESKTOP-1LVUD2E",[[-1,184,"6. \n7. "]],[184,191],[184,184]]],[1551621248410,["tyk50@DESKTOP-1LVUD2E",[[-1,162,"（3）"]],[162,165],[162,162]]],[1551621250295,["tyk50@DESKTOP-1LVUD2E",[[-1,181,"（4）"]],[181,184],[181,181]]],[1551621257471,["tyk50@DESKTOP-1LVUD2E",[[-1,119,"1. "]],[119,122],[119,119]]],[1551621262349,["tyk50@DESKTOP-1LVUD2E",[[1,119,"1. "],[1,135,"2. "],[1,159,"3. "],[1,178,"4. "]],[119,195],[122,207]]],[1551621263721,["tyk50@DESKTOP-1LVUD2E",[[1,141,"\n2. "]],[137,137],[141,141]]],[1551621265123,["tyk50@DESKTOP-1LVUD2E",[[-1,141,"\n2. "]],[141,141],[137,137]]],[1551621269351,["tyk50@DESKTOP-1LVUD2E",[[1,208,"5. \n"]],[207,207],[211,211]]],[1551621288101,["tyk50@DESKTOP-1LVUD2E",[[-1,208,"5. "]],[211,211],[208,208]]],[1551621288462,["tyk50@DESKTOP-1LVUD2E",[[-1,209,"\n"]],[208,208],[207,207]]],[1551621290595,["tyk50@DESKTOP-1LVUD2E",[[1,423,"\n"]],[422,422],[423,423]]],[1551621290965,["tyk50@DESKTOP-1LVUD2E",[[1,424,"\n"]],[423,423],[424,424]]],[1551621292094,["tyk50@DESKTOP-1LVUD2E",[[-1,424,"\n"],[1,425,"#"]],[424,424],[425,425]]],[1551621294163,["tyk50@DESKTOP-1LVUD2E",[[1,425,"# yous"]],[425,425],[431,431]]],[1551621294934,["tyk50@DESKTOP-1LVUD2E",[[-1,427,"yous"]],[431,431],[427,427]]],[1551621297099,["tyk50@DESKTOP-1LVUD2E",[[1,427,"优势"]],[427,427],[429,429]]],[1551621297303,["tyk50@DESKTOP-1LVUD2E",[[1,429,"\n\n"]],[429,429],[430,430]]],[1551621298248,["tyk50@DESKTOP-1LVUD2E",[[1,431,"\n"]],[430,430],[431,431]]],[1551621298534,["tyk50@DESKTOP-1LVUD2E",[[1,431,"通过比较可以发现，函数式编程语言有以下几个特点：\n\n1、并行。在函数式编程中，程序员无需对程序修改，程序就可以并发运行。程序运行期间，不会产生死锁现象。原因是通过函数式编程所得到的程序，在程序中不会出现某一数据被同时修改两次及以上的情况，同样的，两个不同的线程就更不用说了。由于函数式编程有这样的优点，导致了程序员完全不用花费精力去考虑增加某个线程带来的并发问题。\n\n在函数编程语言中，编译器会分析代码，辨认出潜在耗时的创建字符串s1和s2的函数，然后将他们并行的运行。这样的做法，是程序员在使用普通的命令式程序语言时不可能做到的。而使用函数式程序语言可以自动的找出那些可以并发执行的函数。\n\n2、单元测试。在函数式编程中，由于程序中的每一个符号都是final后的，所以这样的函数不会产生副作用。这就导致了在某个地方产生修改，同时不会有函数修改过在自身范围之外的变量或者状态被另外的函数所使用。这就导致了函数的返回结果只是返回值。只有函数自身的参数才会影响函数的返回值，所以在编程的时候，对程序中的每个函数而言，程序员只需在控制它们的参数，而不用在意函数自己点顺序以及函数外部变量和状态就能正确的编程。与函数式编程相比，命令式编程就没有这样的优势了，在检查函数的返回值的同时程序员还必须检查函数是否影响到了函数的外部状态和变量。\n\n3、没有额外作用。副作用是指的是函数内部与外部互动。比如，函数在自身内部可以对函数以外的其他变量进行修改，这样就会产生其他结果。在函数式编程中，想要达到这样的目的就必须让函数自身要保持独立。在函数式程序语言中，所有的功能的结果就是一个返回值，不存在其他的行为，包括对外部变量的修改。\n\n4、不修改状态。在函数式编程中，程序语言在使用中是会不修改变量的，它的一个特性可以使得函数式编程语言区别于其他的程序语言。在其他类型的语言中，变量是用来保存状态的。由于函数式编程不修改变量，导致了这些状态不能存在于变量中。那么，函数式编程语言保存状态的方法是使用参数来保存，递归方法是最好的例子。由于采用了递归方法，函数式编程语言在运行速度上相对于其他语言较慢，所以，速度不够快是函数式编程语言长期不能广泛使用的主要原因。\n\n5、引用透明。在函数式编程中，引用透明指的是运行函数的时候，函数的没一个步骤都不会不牵连到函数的外部变量或状态，而是只依赖于函数输入的参数，相同的参数输入总会得到相同的函数返回值。而在其他类型的语言中，函数的返回值不仅仅与函数的参数传入有关，也与当前的系统状态有关。在不同的系统状态的情况下，函数的返回值不同。\n\n6、代码部署热。在以前，假如想在Windows上安装更新，安装之后重启计算机是必须进行的步骤，可能还不只一次的重启。即使是仅仅安装了一个小的软件也不能免于重启的步骤。一些特殊的系统，比如电信系统，这样的系统必须保证任何时间都在运行。因为如果在系统更新时紧急拨号失效，就可能造成很大的损失。最理想的情况是在完全不停止系统任何组件的情况下，达到更新相关的代码的目的。这样的想法在命令式编程中是不可能的。对函数式的程序，所有的状态即传递给函数的参数都被保存在了堆栈上，这使的热部署轻而易举。实际上，所有我们需要做的就是对工作中的代码和新版本的代码做一个差异比较，然后部署新代码。其他的工作将由一个语言工具自动完成。"]],[431,431],[1814,1814]]],[1551621301687,["tyk50@DESKTOP-1LVUD2E",[[-1,430,"\n"]],[430,430],[429,429]]],[1551621303239,["tyk50@DESKTOP-1LVUD2E",[[1,430,"\n"]],[429,429],[430,430]]],[1551621306846,["tyk50@DESKTOP-1LVUD2E",[[1,456,"*****"]],[456,456],[459,459]]],[1551621308473,["tyk50@DESKTOP-1LVUD2E",[[-1,459,"**"]],[459,459],[457,457]]],[1551621309488,["tyk50@DESKTOP-1LVUD2E",[[1,457," "]],[457,457],[458,458]]],[1551621309749,["tyk50@DESKTOP-1LVUD2E",[[1,459," "]],[459,459],[460,460]]],[1551621316112,["tyk50@DESKTOP-1LVUD2E",[[1,732,"* * *"]],[732,732],[737,737]]],[1551621317871,["tyk50@DESKTOP-1LVUD2E",[[1,1006,"* * *"]],[1006,1006],[1011,1011]]],[1551621319470,["tyk50@DESKTOP-1LVUD2E",[[1,1154,"* * *"]],[1154,1154],[1159,1159]]],[1551621320876,["tyk50@DESKTOP-1LVUD2E",[[1,1372,"* * *"]],[1372,1372],[1377,1377]]],[1551621322225,["tyk50@DESKTOP-1LVUD2E",[[1,1534,"* * *"]],[1534,1534],[1539,1539]]],[1551621329937,["tyk50@DESKTOP-1LVUD2E",[[1,423,"* * *"]],[423,423],[428,428]]],[1551621330905,["tyk50@DESKTOP-1LVUD2E",[[1,423,"\n"]],[422,422],[423,423]]],[1551621338128,["tyk50@DESKTOP-1LVUD2E",[[1,437,"## "]],[437,437],[440,440]]],[1551621341054,["tyk50@DESKTOP-1LVUD2E",[[1,439,"###"]],[439,439],[442,442]]],[1551621343327,["tyk50@DESKTOP-1LVUD2E",[[-1,441,"#"]],[442,442],[441,441]]],[1551621349732,["tyk50@DESKTOP-1LVUD2E",[[1,473,"**"],[1,478,"**"]],[473,478],[473,482]]],[1551621353408,["tyk50@DESKTOP-1LVUD2E",[[1,473,"++"],[1,482,"++"]],[473,482],[473,486]]],[1551621361748,["tyk50@DESKTOP-1LVUD2E",[[1,757,"**"],[1,764,"**"]],[757,764],[757,768]]],[1551621362196,["tyk50@DESKTOP-1LVUD2E",[[1,757,"++"],[1,768,"++"]],[757,768],[757,772]]],[1551621371107,["tyk50@DESKTOP-1LVUD2E",[[1,1039,"**"],[1,1048,"**"]],[1039,1048],[1039,1052]]],[1551621371444,["tyk50@DESKTOP-1LVUD2E",[[1,1039,"_"],[1,1052,"_"]],[1039,1052],[1039,1054]]],[1551621373110,["tyk50@DESKTOP-1LVUD2E",[[-1,1039,"_"],[-1,1053,"_"]],[1039,1054],[1039,1052]]],[1551621373524,["tyk50@DESKTOP-1LVUD2E",[[-1,1039,"**"],[-1,1050,"**"]],[1039,1052],[1039,1048]]],[1551621374636,["tyk50@DESKTOP-1LVUD2E",[[1,1039,"_"],[1,1048,"_"]],[1039,1048],[1039,1050]]],[1551621375256,["tyk50@DESKTOP-1LVUD2E",[[-1,1039,"_"],[-1,1049,"_"]],[1039,1050],[1039,1048]]],[1551621376029,["tyk50@DESKTOP-1LVUD2E",[[1,1039,"++"],[1,1048,"++"]],[1039,1048],[1039,1052]]],[1551621376723,["tyk50@DESKTOP-1LVUD2E",[[1,1039,"**"],[1,1052,"**"]],[1039,1052],[1039,1056]]],[1551621378107,["tyk50@DESKTOP-1LVUD2E",[[-1,1039,"**"],[-1,1054,"**"]],[1039,1056],[1039,1052]]],[1551621378620,["tyk50@DESKTOP-1LVUD2E",[[-1,1039,"++"],[-1,1050,"++"]],[1039,1052],[1039,1048]]],[1551621379624,["tyk50@DESKTOP-1LVUD2E",[[1,1039,"**"],[1,1048,"**"]],[1039,1048],[1039,1052]]],[1551621380251,["tyk50@DESKTOP-1LVUD2E",[[1,1039,"++"],[1,1052,"++"]],[1039,1052],[1039,1056]]],[1551621384555,["tyk50@DESKTOP-1LVUD2E",[[1,1195,"**"],[1,1203,"**"]],[1195,1203],[1195,1207]]],[1551621384953,["tyk50@DESKTOP-1LVUD2E",[[1,1195,"++"],[1,1207,"++"]],[1195,1207],[1195,1211]]],[1551621389436,["tyk50@DESKTOP-1LVUD2E",[[1,1421,"**"],[1,1428,"**"]],[1421,1428],[1421,1432]]],[1551621390360,["tyk50@DESKTOP-1LVUD2E",[[1,1421,"++"],[1,1432,"++"]],[1421,1432],[1421,1436]]],[1551621392909,["tyk50@DESKTOP-1LVUD2E",[[1,1591,"**"],[1,1599,"**"]],[1591,1599],[1591,1603]]],[1551621393499,["tyk50@DESKTOP-1LVUD2E",[[1,1591,"++"],[1,1603,"++"]],[1591,1603],[1591,1607]]],[1551621414941,["tyk50@DESKTOP-1LVUD2E",[[1,432,"#"]],[432,432],[433,433]]],[1551621423907,["tyk50@DESKTOP-1LVUD2E",[[1,434,"其相比的"]],[434,434],[438,438]]]],null,"tyk50@DESKTOP-1LVUD2E"],["d89ef980-3592-480c-89a2-7e0b060e73d3",1551621524375,"---\nlayout: post\ntitle: 函数式语言\ncategories: \n  - 编程\ntags:\n  - 编程\n  - 函数式语言\n---\n\n# 编程语言的种类\n在介绍函数式语言之前我们先来认识一下公认的几种编程语言种类\n\n1. 结构化编程语言，比如C语言等。\n2. 函数式编程语言，比如OCaml, Lisp等。\n3. 逻辑式编程语言，比如Prolog等。\n4. 面向对象程序语言，比如Java等。\n\n# 函数式语言\n \n函数式语言(functional language)一类程序设计语言，是一种非冯·诺伊曼式的程序设计语言。函数式语言主要成分是原始函数、定义函数和函数型。这种语言具有较强的组织数据结构的能力，可以把某一数据结构(如数组)作为单一值处理；可以把函数作为参数，其结果也可为函数，这种定义的函数称为高阶函数，程序就是函数，程序作用在结构型数据上，产生结构型结果，从根本上改变了冯·诺伊曼式语言的“逐词”工作方式。\n\n* * *\n### 其相比的优势\n\n#### 通过比较可以发现，函数式编程语言有以下几个特点：\n* * *\n++**1、并行。**++在函数式编程中，程序员无需对程序修改，程序就可以并发运行。程序运行期间，不会产生死锁现象。原因是通过函数式编程所得到的程序，在程序中不会出现某一数据被同时修改两次及以上的情况，同样的，两个不同的线程就更不用说了。由于函数式编程有这样的优点，导致了程序员完全不用花费精力去考虑增加某个线程带来的并发问题。\n\n在函数编程语言中，编译器会分析代码，辨认出潜在耗时的创建字符串s1和s2的函数，然后将他们并行的运行。这样的做法，是程序员在使用普通的命令式程序语言时不可能做到的。而使用函数式程序语言可以自动的找出那些可以并发执行的函数。\n* * *\n++**2、单元测试。**++在函数式编程中，由于程序中的每一个符号都是final后的，所以这样的函数不会产生副作用。这就导致了在某个地方产生修改，同时不会有函数修改过在自身范围之外的变量或者状态被另外的函数所使用。这就导致了函数的返回结果只是返回值。只有函数自身的参数才会影响函数的返回值，所以在编程的时候，对程序中的每个函数而言，程序员只需在控制它们的参数，而不用在意函数自己点顺序以及函数外部变量和状态就能正确的编程。与函数式编程相比，命令式编程就没有这样的优势了，在检查函数的返回值的同时程序员还必须检查函数是否影响到了函数的外部状态和变量。\n* * *\n++**3、没有额外作用。**++副作用是指的是函数内部与外部互动。比如，函数在自身内部可以对函数以外的其他变量进行修改，这样就会产生其他结果。在函数式编程中，想要达到这样的目的就必须让函数自身要保持独立。在函数式程序语言中，所有的功能的结果就是一个返回值，不存在其他的行为，包括对外部变量的修改。\n* * *\n++**4、不修改状态。**++在函数式编程中，程序语言在使用中是会不修改变量的，它的一个特性可以使得函数式编程语言区别于其他的程序语言。在其他类型的语言中，变量是用来保存状态的。由于函数式编程不修改变量，导致了这些状态不能存在于变量中。那么，函数式编程语言保存状态的方法是使用参数来保存，递归方法是最好的例子。由于采用了递归方法，函数式编程语言在运行速度上相对于其他语言较慢，所以，速度不够快是函数式编程语言长期不能广泛使用的主要原因。\n* * *\n++**5、引用透明。**++在函数式编程中，引用透明指的是运行函数的时候，函数的没一个步骤都不会不牵连到函数的外部变量或状态，而是只依赖于函数输入的参数，相同的参数输入总会得到相同的函数返回值。而在其他类型的语言中，函数的返回值不仅仅与函数的参数传入有关，也与当前的系统状态有关。在不同的系统状态的情况下，函数的返回值不同。\n* * *\n++**6、代码部署热。**++在以前，假如想在Windows上安装更新，安装之后重启计算机是必须进行的步骤，可能还不只一次的重启。即使是仅仅安装了一个小的软件也不能免于重启的步骤。一些特殊的系统，比如电信系统，这样的系统必须保证任何时间都在运行。因为如果在系统更新时紧急拨号失效，就可能造成很大的损失。最理想的情况是在完全不停止系统任何组件的情况下，达到更新相关的代码的目的。这样的想法在命令式编程中是不可能的。对函数式的程序，所有的状态即传递给函数的参数都被保存在了堆栈上，这使的热部署轻而易举。实际上，所有我们需要做的就是对工作中的代码和新版本的代码做一个差异比较，然后部署新代码。其他的工作将由一个语言工具自动完成。\n",[[1551621476223,["tyk50@DESKTOP-1LVUD2E",[[1,30,"\n"]],[29,29],[30,30]]],[1551621476538,["tyk50@DESKTOP-1LVUD2E",[[1,30,"date: 2019-02-28"]],[30,30],[46,46]]],[1551621482704,["tyk50@DESKTOP-1LVUD2E",[[-1,45,"8"]],[46,46],[45,45]]],[1551621483406,["tyk50@DESKTOP-1LVUD2E",[[1,45,"7"]],[45,45],[46,46]]],[1551621540951,["tyk50@DESKTOP-1LVUD2E",[[1,94,"==第一周WEB JAVA作业（3）==\n\n<!-- more -->"]],[94,94],[129,129]]],[1551621543125,["tyk50@DESKTOP-1LVUD2E",[[-1,110,"3"],[1,111,"1"]],[110,111],[111,111]]],[1551621544567,["tyk50@DESKTOP-1LVUD2E",[[1,130,"\n"]],[129,129],[130,130]]],[1551621546076,["tyk50@DESKTOP-1LVUD2E",[[1,94,"\n"]],[94,94],[95,95]]]],null,"tyk50@DESKTOP-1LVUD2E"]]}